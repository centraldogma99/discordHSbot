import { loadUserConfig } from "../tools/loadUserConfig";
import { cardNameInfer } from "../tools/cardNameInfer";
import { Message } from "discord.js";
import { Paginator } from "../tools/Paginator";
import { searchInfo } from "../types/searchInfo";

async function name(message: Message, args: string, info: searchInfo) {
  // DBÎäî Ïù¥ÎØ∏ Ï§ëÎ≥µ Ï†úÍ±∞ÎêòÏñ¥ ÏûàÏúºÎØÄÎ°ú Ï§ëÎ≥µ Ï≤òÎ¶¨ ÌïÑÏöî ÏóÜÏùå
  if (!args) {
    await message.channel.send("‚ùå Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.");
    return;
  }
  const class_ = info.class_;
  const searchingMessage = await message.channel.send("üîç Í≤ÄÏÉâ Ï§ëÏûÖÎãàÎã§...");
  await message.channel.sendTyping().catch(console.log);
  const userConfig = await loadUserConfig(message.author);

  let resCards = await cardNameInfer(args, userConfig.gameMode);

  if (class_ && resCards)
    resCards = resCards.filter((card) => card.classId == class_.id);
  if (!resCards || resCards.length <= 0) {
    message.channel.send(
      "‚ÄºÔ∏è Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§! Ïò§ÌÉÄ, ÎùÑÏñ¥Ïì∞Í∏∞Î•º Îã§Ïãú ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî."
    );
    return;
  }

  const pagi = new Paginator(
    message,
    { value: resCards.map((card) => card.image), isPromise: false },
    userConfig.paginateStep
  );
  let msgs = await pagi.next();
  searchingMessage.delete().catch(console.log);

  while (msgs) {
    const [m, reaction] = await msgs.infoPromise;
    await m;
    if (reaction === "next") {
      await message.channel.sendTyping().catch(console.log);
      await msgs.infoMessage.delete().catch(console.log);
      msgs = await pagi.next();
    } else if (reaction === "prev") {
      await message.channel.sendTyping().catch(console.log);
      await msgs.infoMessage.delete().catch(console.log);
      msgs = await pagi.prev();
    } else if (reaction === "timeout") {
      msgs.infoMessage.delete().catch(console.log);
      break;
    }
  }
  return;
}

module.exports = {
  name: ["Ïù¥Î¶Ñ", "Ïπ¥ÎìúÎ™Ö"],
  description: "name",
  execute: name,
};
