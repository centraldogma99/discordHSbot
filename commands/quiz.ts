import loadUserConfig from "../tools/loadUserConfig";
import { cardRealWildModel, cardAliasStandardModel, cardAliasModel } from "../db";
import generateQuiz from "../tools/generateQuiz";
import { Message, MessageActionRow, MessageButton } from "discord.js";
import getRandomHint from "../tools/image_hint";
import giveUserPoint from "../tools/giveUserPoint";
import { Card } from "../types/card";
import mongoose from "mongoose"

const quizParticipatePoint = 50;
const quizMultiplier = 2;

async function quiz(message: Message) {
  let quizAnswerPoint = 400;
  (message.channel as any).doingQuiz = true;
  const hintUsed = new Array(4).fill(false, 0);
  await message.channel.sendTyping().catch(console.log);
  const userConfig = await loadUserConfig(message.author);
  const difficulty = userConfig.quizConfig.difficulty;
  let chances = userConfig.quizConfig.chances;

  // ÌÄ¥Ï¶àÎ•º ÌíÄÍ∏∞ ÏãúÏûëÌïòÎ©¥ Ìè¨Ïù∏Ìä∏ ÏßÄÍ∏â
  await giveUserPoint(message.author.id, quizParticipatePoint)
    .then(() =>
      message.channel.send(`üí∞ ÌÄ¥Ï¶à Ï∞∏Ïó¨Î°ú ${quizParticipatePoint}Ìè¨Ïù∏Ìä∏ ÌöçÎìù!`)
    )
    .catch(console.log);

  let db: mongoose.Model<Card, any, any>;
  if (userConfig.quizConfig.gameMode == "standard") {
    db = cardAliasStandardModel;
  } else if (userConfig.quizConfig.gameMode == "wild") {
    db = cardAliasModel;
  } else if (userConfig.quizConfig.gameMode == "realwild") {
    db = cardRealWildModel;
  }

  let targetCard: Card;
  if (userConfig.quizConfig.rarity != 0) {
    targetCard = (
      await db.aggregate<Card>([
        { $match: { rarityId: userConfig.quizConfig.rarity } },
        { $sample: { size: 1 } },
      ])
    )[0];
  } else {
    targetCard = (await db.aggregate<Card>([{ $sample: { size: 1 } }]))[0];
  }

  const quizImages = await generateQuiz(targetCard.image, difficulty);
  await message.channel.send({ files: [quizImages.croppedImage] });
  await message.channel.send(
    `‚ÑπÔ∏è  \`-Ìè¨Í∏∞\` Î•º ÏûÖÎ†•ÌïòÎ©¥ ÌÄ¥Ï¶àÎ•º Ï∑®ÏÜåÌï† Ïàò ÏûàÏäµÎãàÎã§.\n‚ÑπÔ∏è  \`-ÌûåÌä∏\` Î•º ÏûÖÎ†•ÌïòÎ©¥ ÌûåÌä∏Î•º Î≥º Ïàò ÏûàÏäµÎãàÎã§.\nÏ±ÑÌåÖÏúºÎ°ú Ïπ¥ÎìúÏùò Ïù¥Î¶ÑÏùÑ ÎßûÌòÄÎ≥¥ÏÑ∏Ïöî! **ÏãúÍ∞ÑÏ†úÌïú : ${userConfig.quizConfig.time ?? 30
    }Ï¥à, Í∏∞Ìöå: ${userConfig.quizConfig.chances
    }Î≤à**\nÏ±ÑÌåÖ ÏïûÏóê '-'(ÎπºÍ∏∞)Î•º Î∂ôÏó¨Ïïº Î™ÖÎ†πÏñ¥/ÎãµÏúºÎ°ú Ïù∏ÏãùÎê©ÎãàÎã§.(Ïòà) -ÏòÅÌòºÏù¥Í≤∞ÏÜçÎêúÏûøÎπõÌòìÎ∞îÎã•\nüí∞ **ÌöçÎìù Ìè¨Ïù∏Ìä∏ : ${quizAnswerPoint}**`
  );

  const answerChecker = (content: string) => {
    return targetCard.alias === content.replace(/\s/g, "");
  };
  const filter = (m: Message) => !m.author.bot;

  const messageCollector = message.channel.createMessageCollector({
    filter,
    time: userConfig.quizConfig.time * 1000 ?? 30000,
  });
  messageCollector.on("collect", async (m) => {
    if (!m.content.startsWith("-")) return;
    const content = m.content.slice(1);
    if (content == "Ìè¨Í∏∞") {
      messageCollector.stop("userAbort");
      return;
    }
    if (answerChecker(content)) {
      messageCollector.stop("answered");
      return;
    } else if (content == "ÌûåÌä∏") {
      if (hintUsed.reduce((f, s) => f && s)) {
        message.channel.send("‚ÄºÔ∏è  ÌûåÌä∏Î•º Î™®Îëê ÏÇ¨Ïö©ÌñàÏäµÎãàÎã§.");
        return;
      }
      quizAnswerPoint /= quizMultiplier;
      const k = getRandomHint(message, targetCard, hintUsed);
      hintUsed[k.hint] = true;
      k.promise;
      await message.channel.send(
        `üí∞ ÌöçÎìù Ìè¨Ïù∏Ìä∏ : ${Math.ceil(quizAnswerPoint)}`
      );
      return;
    } else {
      chances -= 1;
      if (chances == 0) {
        messageCollector.stop("noChancesLeft");
        return;
      }
      messageCollector.resetTimer();
      m.channel.send(`‚ùå  ÌãÄÎ†∏ÏäµÎãàÎã§! Í∏∞ÌöåÍ∞Ä ${chances}Î≤à ÎÇ®ÏïòÏäµÎãàÎã§.`);
    }
  });

  messageCollector.on("end", async (m, reason) => {
    (message.channel as any).doingQuiz = false;
    await message.channel.sendTyping().catch(console.log);
    if (reason == "answered") {
      await message.channel.send(
        `‚≠ïÔ∏è  <@!${m.last().author.id}>Ïù¥(Í∞Ä) Ï†ïÎãµÏùÑ ÎßûÏ∑ÑÏäµÎãàÎã§!`
      );
      const user = await loadUserConfig(m.last().author);
      await giveUserPoint(message.author.id, Math.ceil(quizAnswerPoint))
        .then(() =>
          message.channel.send(
            `üí∞ ÌÄ¥Ï¶à Ï†ïÎãµÏúºÎ°ú ${Math.ceil(quizAnswerPoint)}Ìè¨Ïù∏Ìä∏ ÌöçÎìù!`
          )
        )
        .catch(console.log);

      if (user)
        await user
          .updateOne({ $set: { ["stats.quiz1"]: user.stats.quiz1 + 1 } })
          .exec();
    } else if (reason == "time") {
      await message.channel.send(`‚è∞  ÏãúÍ∞Ñ Ï¢ÖÎ£å!`);
    } else if (reason == "noChancesLeft") {
      await message.channel.send("‚ùå  Í∏∞ÌöåÎ•º Î™®Îëê ÏÇ¨Ïö©ÌñàÏäµÎãàÎã§!");
    } else if (reason == "userAbort") {
      await message.channel.send("‚ùå  ÌÄ¥Ï¶àÎ•º Ìè¨Í∏∞ÌñàÏäµÎãàÎã§.");
    }
    const btn = new MessageButton()
      .setCustomId("primary")
      .setLabel("ÏÉàÎ°úÏö¥ ÌÄ¥Ï¶à!")
      .setStyle("PRIMARY");
    const row = new MessageActionRow().addComponents(btn);
    const lastMsg = await message.channel.send({
      content: `üí° Ï†ïÎãµÏùÄ \`${targetCard.name}\` ÏûÖÎãàÎã§!`,
      components: [row],
      files: [quizImages.originalImage],
    });

    const buttonCollector = lastMsg.createMessageComponentCollector({
      componentType: "BUTTON",
      time: 15000,
      max: 1,
    });
    buttonCollector.on("collect", (i) => {
      i.update({ content: "‚òëÔ∏è  ÏÉàÎ°úÏö¥ ÌÄ¥Ï¶àÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§...", components: [] })
        .then(() => quiz(message))
        .catch((e) => {
          console.log(e);
          message.channel.send(
            "ÌÄ¥Ï¶àÎ•º Í∞ÄÏ†∏Ïò§Îçò Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏä∂ÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî!"
          );
        });
    });
    buttonCollector.on("end", async (_, r) => {
      if (r == "time") await lastMsg.delete().catch(console.log);
    });
  });
}

export = {
  name: ["ÌÄ¥Ï¶à", "Î¨∏Ï†ú"],
  description: "quiz",
  execute: quiz,
};
