/*
  TODO : preProcess Ìï®Ïàò Íµ¨ÌòÑ Î∞è paginator ÏÉùÏÑ±Ïûê Ïù∏ÏûêÎ°ú ÎÑòÍ∏∞Í∏∞
  TODO : Î™®Îì† Ïπ¥ÎìúÎ•º ÌïúÎ≤àÏóê ÏöîÏ≤≠ÌïòÏßÄ ÎßêÍ≥† Í∞úÏàòÏóê Îî∞Îùº Ïú†ÎèôÏ†ÅÏúºÎ°ú Ï™ºÍ∞úÏñ¥ ÏöîÏ≤≠
*/

const axios = require("axios")
const paginator = require("../tools/paginator");
const mongo = require("../db");
const uniqueArrayByName = require('../tools/uniqueArrayByName')
const range = require('../tools/range')

function preProcess(cards){
  return uniqueArrayByName(cards);
}

async function all(message, args, blizzardToken, class_){
  let infoMessage = await message.channel.send("üîç Í≤ÄÏÉâ Ï§ëÏûÖÎãàÎã§...")
  const userConfig = await mongo.userModel.findOne({name:`${message.author.username}#${message.author.discriminator}`}).exec();
  const gamemode = userConfig ? userConfig.gamemode : "wild";
  const paginateStep = userConfig ? userConfig.paginateStep : 3;
  const pageSize = 50;
  const cardCountLimit = 1500;

  // TODO Ïπ¥Îìú Í∞úÏàòÏïåÏïÑÎÇ¥Í∏∞ ÏúÑÌïú ÏöîÏ≤≠, Ï∂îÌõÑ Í∞úÏÑ† ÌïÑÏöî
  let temp = await axios.get("https://us.api.blizzard.com/hearthstone/cards", 
  { params: {
    locale: "ko_KR",
    textFilter: encodeURI(args),
    class: class_,
    set: gamemode,
    pageSize: 1,
    page: 1,
    access_token: blizzardToken
  }});

  let cardCount = temp.data.cardCount;
  if( cardCount == 0 ) {
    message.channel.send("‚ÄºÔ∏è Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§! Ïò§ÌÉÄ, ÎùÑÏñ¥Ïì∞Í∏∞Î•º Îã§Ïãú ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî.");
    return;
  } else if ( cardCount > cardCountLimit ){
    message.channel.send("‚ÄºÔ∏è Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÎÑàÎ¨¥ ÎßéÏäµÎãàÎã§. Ï¢ÄÎçî Íµ¨Ï≤¥Ï†ÅÏù∏ Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.");
    return;
  }

  // ! pageSizeÍ∞Ä ÎÑàÎ¨¥ ÏûëÏúºÎ©¥ 429:too many request Î∞úÏÉù
  // TODO pageSizeÍ∞Ä paginateStepÎ≥¥Îã§ ÏûëÏúºÎ©¥ Ïò§Î•ò Î∞úÏÉù. ÌòÑÏû¨Îäî 40ÏúºÎ°ú Ïú†ÏßÄÌï† Í≤É.
  let promises = range( Math.ceil(cardCount / pageSize), 1).map(i => {
    return axios.get("https://us.api.blizzard.com/hearthstone/cards", 
    { params: {
      locale: "ko_KR",
      textFilter: encodeURI(args),
      class: class_,
      set: gamemode,
      pageSize: pageSize,
      page : i,
      access_token: blizzardToken
    }})
    .then(res => res.data.cards);
  });

  let pagi = new paginator(message, promises, paginateStep, cardCount, preProcess);
  let msgs = await pagi.next();
  infoMessage.delete();

  // ? Short meesageÏùº Í≤ΩÏö∞? - next()Ïùò Î∞òÌôòÍ∞íÏù¥ ÏóÜÏúºÎØÄÎ°ú ÏïÑÎ¨¥Îü∞ Ï≤òÎ¶¨ÎèÑ ÌïòÏßÄ ÏïäÏïÑÎèÑ ÎêúÎã§.
  // FIXME? ÏÇ≠Ï†úÍ∞Ä Îçî Îä¶Í≤å ÎêòÎäî Î¨∏Ï†ú. Ïïà Í≥†Ï≥êÎèÑ Îê†ÏßÄÎèÑ. Í∑∏Î¶º Ìï©ÏπòÎäîÍ≤É Íµ¨ÌòÑ Ïù¥ÌõÑÏóê Îã§Ïãú Í≥†Î†§
  while(msgs && msgs["reaction"]){
    msgs["targetMessages"].map(msg => msg.delete());
    msgs["infoMessage"].delete();
    if( msgs["reaction"] === "‚û°Ô∏è" ){
      msgs = await pagi.next();
    } else if( msgs["reaction"] === "‚¨ÖÔ∏è" ){
      msgs = await pagi.prev();
    }
  }

  return;
}

module.exports = {
  name : 'Î™®Îì†',
  description : 'all',
  execute : all
}